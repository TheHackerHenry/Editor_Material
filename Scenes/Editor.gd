extends TextEdit

var x86_base={
"aaa":"ascii adjust al after addition",
"aad":"ascii adjust ax before division",
"aam":"ascii adjust ax after multiplication",
"aas":"ascii adjust al after subtraction",
"adc":"add with carry",
"add":"add",
"and":"logical and",
"call":"call procedure",
"cbw":"convert byte to word",
"clc":"clear carry flag",
"cld":"clear direction flag",
"cli":"clear interrupt flag",
"cmc":"complement carry flag",
"cmp":"compare operands",
"cmpsb":"compare bytes in memory",
"cmpsw":"compare words",
"cwd":"convert word to doubleword",
"daa":"decimal adjust al after addition",
"das":"decimal adjust al after subtraction",
"dec":"decrement by 1",
"div":"unsigned divide",
"esc":"used with floating-point unit",
"hlt":"enter halt state",
"idiv":"signed divide",
"imul":"signed multiply",
"in":"input from port",
"inc":"increment by 1",
"int":"call to interrupt",
"into":"call to interrupt if overflow",
"iret":"return from interrupt",
"jcc":"jump if condition",
"jcxz":"jump if cx is zero",
"jmp":"jump",
"lahf":"load flags into ah register",
"lds":"load pointer using ds",
"lea":"load effective address",
"les":"load es with pointer",
"lock":"assert bus lock# signal",
"lodsb":"load string byte",
"lodsw":"load string word",
"loop/loopx":"loop control",
"mov":"move",
"mul":"unsigned multiply",
"neg":"two's complement negation",
"nop":"no operation",
"not":"negate the operand, logical not",
"or":"logical or",
"out":"output to port",
"pop":"pop data from stack",
"popf":"pop flags register from stack",
"push":"push data onto stack",
"pushf":"push flags onto stack",
"rcl":"rotate left (with carry)",
"rcr":"rotate right (with carry)",
"repxx":"repeat movs/stos/cmps/lods/scas",
"ret":"return from procedure",
"retn":"return from near procedure",
"retf":"return from far procedure",
"rol":"rotate left",
"ror":"rotate right",
"sahf":"store ah into flags",
"sal":"shift arithmetically left (signed shift left)",
"sar":"shift arithmetically right (signed shift right)",
"sbb":"subtraction with borrow",
"scasb":"compare byte string",
"scasw":"compare word string",
"shl":"shift left (unsigned shift left)",
"shr":"shift right (unsigned shift right)",
"stc":"set carry flag",
"std":"set direction flag",
"sti":"set interrupt flag",
"stosb":"store byte in string",
"stosw":"store word in string",
"sub":"subtraction",
"test":"logical compare (and)",
"wait":"wait until not busy",
"xchg":"exchange data",
"xlat":"table look-up translation",
"xor":"exclusive or",
"bound":"check array index against bounds",
"enter":"enter stack frame",
"ins":"input from port to string",
"leave":"leave stack frame",
"outs":"output string to port",
"arpl":"adjust rpl field of selector",
"clts":"clear task-switched flag in register cr0",
"lar":"load access rights byte",
"lgdt":"load global descriptor table",
"lidt":"load interrupt descriptor table",
"lldt":"load local descriptor table",
"lmsw":"load machine status word",
"loadall":"load all cpu registers, including internal ones such as gdt",
"lsl":"load segment limit",
"ltr":"load task register",
"sgdt":"store global descriptor table",
"sidt":"store interrupt descriptor table",
"sldt":"store local descriptor table",
"smsw":"store machine status word",
"str":"store task register",
"verr":"verify a segment for reading",
"verw":"verify a segment for writing",
"bsf":"bit scan forward",
"bsr":"bit scan reverse",
"bt":"bit test",
"btc":"bit test and complement",
"btr":"bit test and reset",
"bts":"bit test and set",
"cdq":"convert double-word to quad-word",
"cmpsd":"compare string double-word",
"cwde":"convert word to double-word",
"ibts":"insert bit string",
"insd":"input from port to string double-word",
"iretx":"interrupt return; d suffix means 32-bit return, f suffix means do not generate epilogue code (i.e. leave instruction)",
"jecxz":"jump if ecx is zero",
"lfs, lgs":"load far pointer",
"lss":"load stack segment",
"lodsd":"load string double-word",
"loopw":"loop, conditional loop",
"loopd":"loop while equal",
"movsx":"move with sign-extension",
"movzx":"move with zero-extension",
"outsd":"output to port from string double-word",
"popad":"pop all double-word (32-bit) registers from stack",
"popfd":"pop data into eflags register",
"pushad":"push all double-word (32-bit) registers onto stack",
"pushfd":"push eflags register onto stack",
"scasd":"scan string data double-word",
"setcc":"set byte to one on condition, zero otherwise",
"shld":"shift left double-word",
"shrd":"shift right double-word",
"stosd":"store string double-word",
"xbts":"extract bit string",
"movb":"move byte",
"movw":"move word",
"movd":"move double word",
"movq":"move quad word",
"movzb":"move byte zero extend",
"movzw":"move word zero extend",
"movzd":"move double word zero extend",
"movzq":"move quad word zero extend",
"movsb":"move byte sign extend",
"movsw":"move word sign extend",
"movsd":"move double word sign extend",
"movsq":"move quad word sign extend",
"ja":"jump if above",
"jae":"jump if above or equal",
"jb":"jump if below",
"jbe":"jump if below or equal",
"jc":"jump if carry",
"je":"jump if equal",
"jg":"jump if greater (signed)",
"jge":"jump if greater or equal (signed)",
"jl":"jump if less (signed)",
"jle":"jump if less or equal (signed)",
"jna":"jump if not above",
"jnae":"jump if not above or equal",
"jnb":"jump if not below",
"jnbe":"jump if not below or equal",
"jnc":"jump if not carry",
"jne":"jump if not equal",
"jng":"jump if not greater (signed)",
"jnge":"jump if not greater or equal (signed)",
"jnl":"jump if not less (signed)",
"jnle":"jump if not less or equal (signed)",
"jno":"jump if not overflow (signed)",
"jnp":"jump if no parity",
"jns":"jump if not signed (signed)",
"jnz":"jump if not zero",
"jo":"jump if overflow (signed)",
"jp":"jump if parity",
"jpe":"jump if parity even",
"jpo":"jump if parity odd",
"js":"jump if signed (signed)",
"jz":"jump if zero",
"syscall":"call syscall (UNIX)"
}
var x86_float={
"f2xm1":"2^{x}-1",
"fabs":"absolute value",
"fadd":"add",
"faddp":"add and pop",
"fbld":"load bcd",
"fbstp":"store bcd and pop",
"fchs":"change sign",
"fclex":"clear exceptions",
"fcom":"compare",
"fcomp":"compare and pop",
"fcompp":"compare and pop twice",
"fdecstp":"decrement floating point stack pointer",
"fdisi":"disable interrupts",
"fdiv":"divide",
"fdivp":"divide and pop",
"fdivr":"divide reversed",
"fdivrp":"divide reversed and pop",
"feni":"enable interrupts",
"ffree":"free register",
"fiadd":"integer add",
"ficom":"integer compare",
"ficomp":"integer compare and pop",
"fidiv":"integer divide",
"fidivr":"integer divide reversed",
"fild":"load integer",
"fimul":"integer multiply",
"fincstp":"increment floating point stack pointer",
"finit":"initialize floating point processor",
"fist":"store integer",
"fistp":"store integer and pop",
"fisub":"integer subtract",
"fisubr":"integer subtract reversed",
"fld":"floating point load",
"fld1":"load 1.0 onto stack",
"fldcw":"load control word",
"fldenv":"load environment state",
"fldenvw":"load environment state, 16-bit",
"fldl2e":"load log2(e) onto stack",
"fldl2t":"load log2(10) onto stack",
"fldlg2":"load log10(2) onto stack",
"fldln2":"load ln(2) onto stack",
"fldpi":"load π onto stack",
"fldz":"load 0.0 onto stack",
"fmul":"multiply",
"fmulp":"multiply and pop",
"fnclex":"clear exceptions, no wait",
"fndisi":"disable interrupts, no wait",
"fneni":"enable interrupts, no wait",
"fninit":"initialize floating point processor, no wait",
"fnop":"no operation",
"fnsave":"save fpu state, no wait, 8-bit",
"fnsavew":"save fpu state, no wait, 16-bit",
"fnstcw":"store control word, no wait",
"fnstenv":"store fpu environment, no wait",
"fnstenvw":"store fpu environment, no wait, 16-bit",
"fnstsw":"store status word, no wait",
"fpatan":"partial arctangent",
"fprem":"partial remainder",
"fptan":"partial tangent",
"frndint":"round to integer",
"frstor":"restore saved state",
"frstorw":"restore saved state",
"fsave":"save fpu state",
"fsavew":"save fpu state, 16-bit",
"fscale":"scale by factor of 2",
"fsqrt":"square root",
"fst":"floating point store",
"fstcw":"store control word",
"fstenv":"store fpu environment",
"fstenvw":"store fpu environment, 16-bit",
"fstp":"store and pop",
"fstsw":"store status word",
"fsub":"subtract",
"fsubp":"subtract and pop",
"fsubr":"reverse subtract",
"fsubrp":"reverse subtract and pop",
"ftst":"test for zero",
"fwait":"wait while fpu is executing",
"fxam":"examine condition flags",
"fxch":"exchange registers",
"fxtract":"extract exponent and significand",
"fyl2x":"y · log2 x",
"fyl2xp1":"y · log2 (x+1)",
}
var x86_mmx_sse={
"packssdw":"pack doublewords to words (signed with saturation)",
"packsswb":"pack words to bytes (signed with saturation)",
"packuswb":"pack words to bytes (unsigned with saturation)",
"paddb":"add packed byte integers",
"paddw":"add packed word integers",
"paddd":"add packed doubleword integers",
"paddq":"add packed quadword integers",
"paddsb":"add packed signed byte integers and saturate",
"paddsw":"add packed signed word integers and saturate",
"paddusb":"add packed unsigned byte integers and saturate",
"paddusw":"add packed unsigned word integers and saturate",
"pand":"bitwise and",
"pandn":"bitwise and not",
"por":"bitwise or",
"pxor":"bitwise xor",
"pcmpeqb":"compare packed bytes for equality",
"pcmpeqw":"compare packed words for equality",
"pcmpeqd":"compare packed doublewords for equality",
"pcmpgtb":"compare packed signed byte integers for greater than",
"pcmpgtw":"compare packed signed word integers for greater than",
"pcmpgtd":"compare packed signed doubleword integers for greater than",
"pmaddwd":"multiply packed words, add adjacent doubleword results",
"pmulhw":"multiply packed signed word integers, store high 16 bits of results",
"pmullw":"multiply packed signed word integers, store low 16 bits of results",
"psllw":"shift left words, shift in zeros",
"pslld":"shift left doublewords, shift in zeros",
"psllq":"shift left quadword, shift in zeros",
"psrad":"shift right doublewords, shift in sign bits",
"psraw":"shift right words, shift in sign bits",
"psrlw":"shift right words, shift in zeros",
"psrld":"shift right doublewords, shift in zeros",
"psrlq":"shift right quadword, shift in zeros",
"psubb":"subtract packed byte integers",
"psubw":"subtract packed word integers",
"psubd":"subtract packed doubleword integers",
"psubsb":"subtract signed packed bytes with saturation",
"psubsw":"subtract signed packed words with saturation",
"psubusb":"subtract unsigned packed bytes with saturation",
"psubusw":"subtract unsigned packed words with saturation",
"punpckhbw":"unpack and interleave high-order bytes",
"punpckhwd":"unpack and interleave high-order words",
"punpckhdq":"unpack and interleave high-order doublewords",
"punpcklbw":"unpack and interleave low-order bytes",
"punpcklwd":"unpack and interleave low-order words",
"punpckldq":"unpack and interleave low-order doublewords",
}
var x86_non_regs={
"rbx":"base register, 64bits",
"ebx":"base register, 32bits",
"bx":"base register, 16bits",
"bh":"base register, upper 8bits",
"bl":"base register, lower 8bits",
"rsi":"source index register, 64bits",
"esi":"source index register, 32bits",
"si":"source index register, 16bits",
"rdi":"destination index register, 64bits",
"edi":"destination index register, 32bits",
"di":"destination index register, 16bits",
"rsp":"stack pointer, 64bits",
"esp":"stack pointer, 32bits",
"sp":"stack pointer, 16bits",
"rbp":"base pointer, 64bits",
"ebp":"base pointer, 32bits",
"bp":"base pointer, 16bits",
"rip":"instruction pointer, 64bits",
"r12":"register, 64bits",
"r12d":"register, 32bits",
"r12w":"register, 16bits",
"r12b":"register, 8bits",
"r13":"register, 64bits",
"r13d":"register, 32bits",
"r13w":"register, 16bits",
"r13b":"register, 8bits",
"r14":"register, 64bits",
"r14d":"register, 32bits",
"r14w":"register, 16bits",
"r14b":"register, 8bits",
"r15":"register, 64bits",
"r15d":"register, 32bits",
"r15w":"register, 16bits",
"r15b":"register, 8bits",
'mm0':'register',
'mm1':'register',
'mm2':'register',
'mm3':'register',
'mm4':'register',
'mm5':'register',
'mm6':'register',
'mm7':'register',
'xmm6':'register',
'ymm6':'register',
'xmm7':'register',
'ymm7':'register',
'xmm8':'register',
'ymm8':'register',
'xmm9':'register',
'ymm9':'register',
'xmm10':'register',
'ymm10':'register',
'xmm11':'register',
'ymm11':'register',
'xmm12':'register',
'ymm12':'register',
'xmm13':'register',
'ymm13':'register',
'xmm14':'register',
'ymm14':'register',
}
var x86_vol_regs={
"rax":"accumulator register, 64bits",
"eax":"accumulator register, 32bits",
"ax":"accumulator register, 16bits",
"ah":"accumulator register, upper 8bits",
"al":"accumulator register, lower 8bits",
"rcx":"counter register, 64bits",
"ecx":"counter register, 32bits",
"cx":"counter register, 16bits",
"ch":"counter register, upper 8bits",
"cl":"counter register, lower 8bits",
"rdx":"data register, 64bits",
"edx":"data register, 32bits",
"dx":"data register, 16bits",
"dh":"data register, upper 8bits",
"dl":"data register, lower 8bits",
'xmm0':'register',
'ymm0':'register',
'xmm1':'register',
'ymm1':'register',
'xmm2':'register',
'ymm2':'register',
'xmm3':'register',
'ymm3':'register',
'xmm4':'register',
'ymm4':'register',
'xmm5':'register',
'ymm5':'register',
"r8":"register, 64bits",
"r8d":"register, 32bits",
"r8w":"register, 16bits",
"r8b":"register, 8bits",
"r9":"register, 64bits",
"r9d":"register, 32bits",
"r9w":"register, 16bits",
"r9b":"register, 8bits",
"r10":"register, 64bits",
"r10d":"register, 32bits",
"r10w":"register, 16bits",
"r10b":"register, 8bits",
"r11":"register, 64bits",
"r11d":"register, 32bits",
"r11w":"register, 16bits",
"r11b":"register, 8bits",
"cs":"code segment register",
"ds":"data segment register",
"ss":"stack segment regiter",
"es":"extra segment register",
}

var size=null
var file_path=""
onready var file=get_parent().get_node("File")
var mode=""

var blue   = Color("#29b6f6")
var green  = Color("#1de9b6")
var orange = Color("#ffa726")
var purple = Color("#e1bee7")
var lime   = Color("#eeff41")
var gray   = Color("#9e9e9e")
var cyan   = Color("#00e5ff")

var syntax=[
	"global","comm","lcomm","byte","word","double","float","quad","noprefix","align","balign","macro","string","ascii","asciz","fill","extern","import",
	"readable","writeable","executable","db","dd","dw","dq","resb","resd","resw","resq"
]
var doc={
"rax":"accumulator register, 64bits",
"eax":"accumulator register, 32bits",
"ax":"accumulator register, 16bits",
"ah":"accumulator register, upper 8bits",
"al":"accumulator register, lower 8bits",
"rcx":"counter register, 64bits",
"ecx":"counter register, 32bits",
"cx":"counter register, 16bits",
"ch":"counter register, upper 8bits",
"cl":"counter register, lower 8bits",
"rdx":"data register, 64bits",
"edx":"data register, 32bits",
"dx":"data register, 16bits",
"dh":"data register, upper 8bits",
"dl":"data register, lower 8bits",
'xmm0':'register',
'ymm0':'register',
'xmm1':'register',
'ymm1':'register',
'xmm2':'register',
'ymm2':'register',
'xmm3':'register',
'ymm3':'register',
'xmm4':'register',
'ymm4':'register',
'xmm5':'register',
'ymm5':'register',
"r8":"register, 64bits",
"r8d":"register, 32bits",
"r8w":"register, 16bits",
"r8b":"register, 8bits",
"r9":"register, 64bits",
"r9d":"register, 32bits",
"r9w":"register, 16bits",
"r9b":"register, 8bits",
"r10":"register, 64bits",
"r10d":"register, 32bits",
"r10w":"register, 16bits",
"r10b":"register, 8bits",
"r11":"register, 64bits",
"r11d":"register, 32bits",
"r11w":"register, 16bits",
"r11b":"register, 8bits",
"cs":"code segment register",
"ds":"data segment register",
"ss":"stack segment regiter",
"es":"extra segment register",
"rbx":"base register, 64bits",
"ebx":"base register, 32bits",
"bx":"base register, 16bits",
"bh":"base register, upper 8bits",
"bl":"base register, lower 8bits",
"rsi":"source index register, 64bits",
"esi":"source index register, 32bits",
"si":"source index register, 16bits",
"rdi":"destination index register, 64bits",
"edi":"destination index register, 32bits",
"di":"destination index register, 16bits",
"rsp":"stack pointer, 64bits",
"esp":"stack pointer, 32bits",
"sp":"stack pointer, 16bits",
"rbp":"base pointer, 64bits",
"ebp":"base pointer, 32bits",
"bp":"base pointer, 16bits",
"rip":"instruction pointer, 64bits",
"r12":"register, 64bits",
"r12d":"register, 32bits",
"r12w":"register, 16bits",
"r12b":"register, 8bits",
"r13":"register, 64bits",
"r13d":"register, 32bits",
"r13w":"register, 16bits",
"r13b":"register, 8bits",
"r14":"register, 64bits",
"r14d":"register, 32bits",
"r14w":"register, 16bits",
"r14b":"register, 8bits",
"r15":"register, 64bits",
"r15d":"register, 32bits",
"r15w":"register, 16bits",
"r15b":"register, 8bits",
'mm0':'register',
'mm1':'register',
'mm2':'register',
'mm3':'register',
'mm4':'register',
'mm5':'register',
'mm6':'register',
'mm7':'register',
'xmm6':'register',
'ymm6':'register',
'xmm7':'register',
'ymm7':'register',
'xmm8':'register',
'ymm8':'register',
'xmm9':'register',
'ymm9':'register',
'xmm10':'register',
'ymm10':'register',
'xmm11':'register',
'ymm11':'register',
'xmm12':'register',
'ymm12':'register',
'xmm13':'register',
'ymm13':'register',
'xmm14':'register',
'ymm14':'register',
"packssdw":"pack doublewords to words (signed with saturation)",
"packsswb":"pack words to bytes (signed with saturation)",
"packuswb":"pack words to bytes (unsigned with saturation)",
"paddb":"add packed byte integers",
"paddw":"add packed word integers",
"paddd":"add packed doubleword integers",
"paddq":"add packed quadword integers",
"paddsb":"add packed signed byte integers and saturate",
"paddsw":"add packed signed word integers and saturate",
"paddusb":"add packed unsigned byte integers and saturate",
"paddusw":"add packed unsigned word integers and saturate",
"pand":"bitwise and",
"pandn":"bitwise and not",
"por":"bitwise or",
"pxor":"bitwise xor",
"pcmpeqb":"compare packed bytes for equality",
"pcmpeqw":"compare packed words for equality",
"pcmpeqd":"compare packed doublewords for equality",
"pcmpgtb":"compare packed signed byte integers for greater than",
"pcmpgtw":"compare packed signed word integers for greater than",
"pcmpgtd":"compare packed signed doubleword integers for greater than",
"pmaddwd":"multiply packed words, add adjacent doubleword results",
"pmulhw":"multiply packed signed word integers, store high 16 bits of results",
"pmullw":"multiply packed signed word integers, store low 16 bits of results",
"psllw":"shift left words, shift in zeros",
"pslld":"shift left doublewords, shift in zeros",
"psllq":"shift left quadword, shift in zeros",
"psrad":"shift right doublewords, shift in sign bits",
"psraw":"shift right words, shift in sign bits",
"psrlw":"shift right words, shift in zeros",
"psrld":"shift right doublewords, shift in zeros",
"psrlq":"shift right quadword, shift in zeros",
"psubb":"subtract packed byte integers",
"psubw":"subtract packed word integers",
"psubd":"subtract packed doubleword integers",
"psubsb":"subtract signed packed bytes with saturation",
"psubsw":"subtract signed packed words with saturation",
"psubusb":"subtract unsigned packed bytes with saturation",
"psubusw":"subtract unsigned packed words with saturation",
"punpckhbw":"unpack and interleave high-order bytes",
"punpckhwd":"unpack and interleave high-order words",
"punpckhdq":"unpack and interleave high-order doublewords",
"punpcklbw":"unpack and interleave low-order bytes",
"punpcklwd":"unpack and interleave low-order words",
"punpckldq":"unpack and interleave low-order doublewords",
"f2xm1":"2^{x}-1",
"fabs":"absolute value",
"fadd":"add",
"faddp":"add and pop",
"fbld":"load bcd",
"fbstp":"store bcd and pop",
"fchs":"change sign",
"fclex":"clear exceptions",
"fcom":"compare",
"fcomp":"compare and pop",
"fcompp":"compare and pop twice",
"fdecstp":"decrement floating point stack pointer",
"fdisi":"disable interrupts",
"fdiv":"divide",
"fdivp":"divide and pop",
"fdivr":"divide reversed",
"fdivrp":"divide reversed and pop",
"feni":"enable interrupts",
"ffree":"free register",
"fiadd":"integer add",
"ficom":"integer compare",
"ficomp":"integer compare and pop",
"fidiv":"integer divide",
"fidivr":"integer divide reversed",
"fild":"load integer",
"fimul":"integer multiply",
"fincstp":"increment floating point stack pointer",
"finit":"initialize floating point processor",
"fist":"store integer",
"fistp":"store integer and pop",
"fisub":"integer subtract",
"fisubr":"integer subtract reversed",
"fld":"floating point load",
"fld1":"load 1.0 onto stack",
"fldcw":"load control word",
"fldenv":"load environment state",
"fldenvw":"load environment state, 16-bit",
"fldl2e":"load log2(e) onto stack",
"fldl2t":"load log2(10) onto stack",
"fldlg2":"load log10(2) onto stack",
"fldln2":"load ln(2) onto stack",
"fldpi":"load π onto stack",
"fldz":"load 0.0 onto stack",
"fmul":"multiply",
"fmulp":"multiply and pop",
"fnclex":"clear exceptions, no wait",
"fndisi":"disable interrupts, no wait",
"fneni":"enable interrupts, no wait",
"fninit":"initialize floating point processor, no wait",
"fnop":"no operation",
"fnsave":"save fpu state, no wait, 8-bit",
"fnsavew":"save fpu state, no wait, 16-bit",
"fnstcw":"store control word, no wait",
"fnstenv":"store fpu environment, no wait",
"fnstenvw":"store fpu environment, no wait, 16-bit",
"fnstsw":"store status word, no wait",
"fpatan":"partial arctangent",
"fprem":"partial remainder",
"fptan":"partial tangent",
"frndint":"round to integer",
"frstor":"restore saved state",
"frstorw":"restore saved state",
"fsave":"save fpu state",
"fsavew":"save fpu state, 16-bit",
"fscale":"scale by factor of 2",
"fsqrt":"square root",
"fst":"floating point store",
"fstcw":"store control word",
"fstenv":"store fpu environment",
"fstenvw":"store fpu environment, 16-bit",
"fstp":"store and pop",
"fstsw":"store status word",
"fsub":"subtract",
"fsubp":"subtract and pop",
"fsubr":"reverse subtract",
"fsubrp":"reverse subtract and pop",
"ftst":"test for zero",
"fwait":"wait while fpu is executing",
"fxam":"examine condition flags",
"fxch":"exchange registers",
"fxtract":"extract exponent and significand",
"fyl2x":"y · log2 x",
"fyl2xp1":"y · log2 (x+1)",
"aaa":"ascii adjust al after addition",
"aad":"ascii adjust ax before division",
"aam":"ascii adjust ax after multiplication",
"aas":"ascii adjust al after subtraction",
"adc":"add with carry",
"add":"add",
"and":"logical and",
"call":"call procedure",
"cbw":"convert byte to word",
"clc":"clear carry flag",
"cld":"clear direction flag",
"cli":"clear interrupt flag",
"cmc":"complement carry flag",
"cmp":"compare operands",
"cmpsb":"compare bytes in memory",
"cmpsw":"compare words",
"cwd":"convert word to doubleword",
"daa":"decimal adjust al after addition",
"das":"decimal adjust al after subtraction",
"dec":"decrement by 1",
"div":"unsigned divide",
"esc":"used with floating-point unit",
"hlt":"enter halt state",
"idiv":"signed divide",
"imul":"signed multiply",
"in":"input from port",
"inc":"increment by 1",
"int":"call to interrupt",
"into":"call to interrupt if overflow",
"iret":"return from interrupt",
"jcc":"jump if condition",
"jcxz":"jump if cx is zero",
"jmp":"jump",
"lahf":"load flags into ah register",
"lds":"load pointer using ds",
"lea":"load effective address",
"les":"load es with pointer",
"lock":"assert bus lock# signal",
"lodsb":"load string byte",
"lodsw":"load string word",
"loop/loopx":"loop control",
"mov":"move",
"mul":"unsigned multiply",
"neg":"two's complement negation",
"nop":"no operation",
"not":"negate the operand, logical not",
"or":"logical or",
"out":"output to port",
"pop":"pop data from stack",
"popf":"pop flags register from stack",
"push":"push data onto stack",
"pushf":"push flags onto stack",
"rcl":"rotate left (with carry)",
"rcr":"rotate right (with carry)",
"repxx":"repeat movs/stos/cmps/lods/scas",
"ret":"return from procedure",
"retn":"return from near procedure",
"retf":"return from far procedure",
"rol":"rotate left",
"ror":"rotate right",
"sahf":"store ah into flags",
"sal":"shift arithmetically left (signed shift left)",
"sar":"shift arithmetically right (signed shift right)",
"sbb":"subtraction with borrow",
"scasb":"compare byte string",
"scasw":"compare word string",
"shl":"shift left (unsigned shift left)",
"shr":"shift right (unsigned shift right)",
"stc":"set carry flag",
"std":"set direction flag",
"sti":"set interrupt flag",
"stosb":"store byte in string",
"stosw":"store word in string",
"sub":"subtraction",
"test":"logical compare (and)",
"wait":"wait until not busy",
"xchg":"exchange data",
"xlat":"table look-up translation",
"xor":"exclusive or",
"bound":"check array index against bounds",
"enter":"enter stack frame",
"ins":"input from port to string",
"leave":"leave stack frame",
"outs":"output string to port",
"arpl":"adjust rpl field of selector",
"clts":"clear task-switched flag in register cr0",
"lar":"load access rights byte",
"lgdt":"load global descriptor table",
"lidt":"load interrupt descriptor table",
"lldt":"load local descriptor table",
"lmsw":"load machine status word",
"loadall":"load all cpu registers, including internal ones such as gdt",
"lsl":"load segment limit",
"ltr":"load task register",
"sgdt":"store global descriptor table",
"sidt":"store interrupt descriptor table",
"sldt":"store local descriptor table",
"smsw":"store machine status word",
"str":"store task register",
"verr":"verify a segment for reading",
"verw":"verify a segment for writing",
"bsf":"bit scan forward",
"bsr":"bit scan reverse",
"bt":"bit test",
"btc":"bit test and complement",
"btr":"bit test and reset",
"bts":"bit test and set",
"cdq":"convert double-word to quad-word",
"cmpsd":"compare string double-word",
"cwde":"convert word to double-word",
"ibts":"insert bit string",
"insd":"input from port to string double-word",
"iretx":"interrupt return; d suffix means 32-bit return, f suffix means do not generate epilogue code (i.e. leave instruction)",
"jecxz":"jump if ecx is zero",
"lfs, lgs":"load far pointer",
"lss":"load stack segment",
"lodsd":"load string double-word",
"loopw":"loop, conditional loop",
"loopd":"loop while equal",
"movsx":"move with sign-extension",
"movzx":"move with zero-extension",
"outsd":"output to port from string double-word",
"popad":"pop all double-word (32-bit) registers from stack",
"popfd":"pop data into eflags register",
"pushad":"push all double-word (32-bit) registers onto stack",
"pushfd":"push eflags register onto stack",
"scasd":"scan string data double-word",
"setcc":"set byte to one on condition, zero otherwise",
"shld":"shift left double-word",
"shrd":"shift right double-word",
"stosd":"store string double-word",
"xbts":"extract bit string",
"movb":"move byte",
"movw":"move word",
"movd":"move double word",
"movq":"move quad word",
"movzb":"move byte zero extend",
"movzw":"move word zero extend",
"movzd":"move double word zero extend",
"movzq":"move quad word zero extend",
"movsb":"move byte sign extend",
"movsw":"move word sign extend",
"movsd":"move double word sign extend",
"movsq":"move quad word sign extend",
"ja":"jump if above",
"jae":"jump if above or equal",
"jb":"jump if below",
"jbe":"jump if below or equal",
"jc":"jump if carry",
"je":"jump if equal",
"jg":"jump if greater (signed)",
"jge":"jump if greater or equal (signed)",
"jl":"jump if less (signed)",
"jle":"jump if less or equal (signed)",
"jna":"jump if not above",
"jnae":"jump if not above or equal",
"jnb":"jump if not below",
"jnbe":"jump if not below or equal",
"jnc":"jump if not carry",
"jne":"jump if not equal",
"jng":"jump if not greater (signed)",
"jnge":"jump if not greater or equal (signed)",
"jnl":"jump if not less (signed)",
"jnle":"jump if not less or equal (signed)",
"jno":"jump if not overflow (signed)",
"jnp":"jump if no parity",
"jns":"jump if not signed (signed)",
"jnz":"jump if not zero",
"jo":"jump if overflow (signed)",
"jp":"jump if parity",
"jpe":"jump if parity even",
"jpo":"jump if parity odd",
"js":"jump if signed (signed)",
"jz":"jump if zero",
"syscall":"call syscall (UNIX)"
}
var labels=[]

func _ready():
	return # why is this here?
	OnResize()
	get_tree().root.connect("size_changed",self,"OnResize")
	for each in x86_base.keys():
		add_keyword_color(each,green)
	for each in x86_float.keys():
		add_keyword_color(each,blue)
	for each in x86_mmx_sse.keys():
		add_keyword_color(each,orange)
	for each in x86_vol_regs.keys():
		add_keyword_color(each,purple)
	for each in x86_non_regs.keys():
		add_keyword_color(each,lime)
	for each in syntax:
		add_keyword_color(each,cyan)
	for each in ["section","data","text","code","bss"]:
		add_keyword_color(each,Color.aquamarine)
	add_color_region('//','',gray,true)
	add_color_region('/*','*/',gray)
	add_color_region(';','',gray,true)
	add_keyword_color("_start",green)
	add_color_region('"','"',Color("33b5e5"),true)

func _process(delta):
	get_tree().quit(-1) # exit
	if Input.is_key_pressed(KEY_CONTROL) and Input.is_action_just_released("IncFont"):
		var font=get_font("font")
		font.size+=1
		add_font_override("font",font)
	elif Input.is_key_pressed(KEY_CONTROL) and Input.is_action_just_released("DecFont"):
		var font=get_font("font")
		font.size-=1
		add_font_override("font",font)
func _input(event):
	if event.is_action_pressed("Save"):
		mode="SAVE"
		if file_path=="":
			file.mode=FileDialog.MODE_SAVE_FILE
			file.popup()
		else:
			OnFileSelected(file_path)
		var re=RegEx.new()
		re.compile("\\w*:")
		for each in re.search_all(text):
			if !has_keyword_color(each.get_string()):
				add_keyword_color(each.get_string().replace(":",""),Color("#33b5e5"))
	elif event.is_action_pressed("Open"):
		file.mode=FileDialog.MODE_OPEN_FILE
		mode="OPEN"
		file.popup()
	if get_parent().get_parent().current_tab!=get_parent().get_index():
		get_parent().get_node("File").visible=false
	var word=get_word_under_cursor()
	if word=="":
		get_parent().get_node("Help").text=""
	elif word in doc.keys():
		get_parent().get_node("Help").text=doc[word]
	elif word.is_valid_hex_number(true):
		get_parent().get_node("Help").text="Dec: "+str(word.hex_to_int())
	else:
		var ascii=word.to_ascii()
		var hex=""
		for each in ascii:
			hex+=" %x"
		hex=hex % Array(ascii)
		get_parent().get_node("Help").text="Length: "+str(word.length())+" Hex: "+hex

#func OnResize(): # uncomment
	size=OS.window_size
	rect_size.x=size.x
	rect_size.y=size.y-80
	get_parent().get_node("BottomBar").rect_size.x=size.x
	get_parent().get_node("Help").rect_size.x=size.x
	get_parent().get_node("BottomBar").rect_position.y=size.y-40
	get_parent().get_node("Help").rect_position.y=size.y-40

func OnFileSelected(path):
	file.visible=false
	file_path=path
	get_parent().name=path.replace(".","_").split("/")[-1]
	var f=File.new()
	if mode=="SAVE":
		f.open(path,File.WRITE)
		f.store_string(text)
	elif mode=="OPEN":
		f.open(path,File.READ)
		text=f.get_as_text()
	f.close()
